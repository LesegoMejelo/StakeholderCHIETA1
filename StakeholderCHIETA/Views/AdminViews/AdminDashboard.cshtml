@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Admin Dashboard — Users & Engagement</title>
    <link rel="stylesheet" href="~/Content/AdminView/AdminDashboard.css" />
</head>

<body>
    <!-- Header -->
    <header class="topbar">
        <div class="container topbar-inner">
            <div class="brand">
                <img class="logo" src="/Content/StakeholderView/StakeholderLandingImages/Logo.png" alt="CHIETA logo" />
                <div class="divider"></div>
                <div class="page-title">Admin Dashboard</div>
            </div>

            <button class="icon-btn" id="settings-btn" aria-haspopup="menu" aria-expanded="false">
                <span class="hide-sm">Settings</span>
            </button>
            <nav class="menu-popover" id="settings-menu" role="menu" hidden>
                <a role="menuitem" href="#">Profile</a>
                <a role="menuitem" href="#">Notifications</a>
                <a role="menuitem" href="#">Help</a>
            </nav>
        </div>
    </header>

    <main class="container page">
        <!-- Decorative shapes -->
        <div class="decor blob-right"></div>
        <div class="decor arc-left"></div>
        <div class="decor arc-right-bottom"></div>

        <!-- Welcome / Hero -->
        <section class="hero container">
            <div class="hero__bg-blob" aria-hidden="true"></div>
            <div class="hero__content">
                <h1>Admin Dashboard — <span class="accent">Users & Engagement</span></h1>
                <p>Analyse users, appointments, and inquiries in one place.</p>
            </div>
        </section>

        <!-- User Management -->
        <section class="container">
            <article class="card">
                <header class="card__title-row">
                    <h2>User Management</h2>
                    <div class="row-actions">
                        <input id="userSearch" class="input" placeholder="Search users…" />
                        <button id="addUserBtn" type="button" class="cta small">+ Add New User</button>
                    </div>
                </header>
                <div class="table-wrap">
                    <table class="table" aria-label="Users table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Province</th>
                                <th style="text-align:right;">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="users-body">
                            <!-- Filled by JS -->
                        </tbody>
                    </table>
                </div>
                <div class="pagination" id="pager"></div>
            </article>
        </section>

        <!-- User Modal -->
        <div class="modal" id="userModal" aria-hidden="true" role="dialog">
            <div class="modal__dialog">
                <header class="modal__header">
                    <h3 id="modalTitle">Add User</h3>
                    <button class="icon-btn dark" id="closeModal" aria-label="Close">✕</button>
                </header>

                <form id="userForm" class="form">
                    <input type="hidden" id="userId" />

                    <div class="form__row">
                        <label for="Name">Name</label>
                        <input id="Name" class="input" required />
                    </div>

                    <div class="form__row">
                        <label for="Province">Province</label>
                        <select id="Province" class="select" required>
                            <option value="Gauteng">Gauteng</option>
                            <option value="Western Cape">Western Cape</option>
                            <option value="Eastern Cape">Eastern Cape</option>
                            <option value="Northern Cape">Northern Cape</option>
                            <option value="Mpumalanga">Mpumalanga</option>
                            <option value="North-West">North-West</option>
                            <option value="Limpopo">Limpopo</option>
                            <option value="KZN">KZN</option>
                            <option value="Free State">Free State</option>
                        </select>
                    </div>

                    <div class="form__row">
                        <label for="email">Email</label>
                        <input id="email" type="email" class="input" required />
                    </div>

                    <div class="form__row">
                        <label for="password">Password</label>
                        <input id="password" type="password" class="input" required />
                    </div>

                    <div class="form__row">
                        <label for="Role">Role</label>
                        <select id="Role" class="select" required>
                            <option value="Client">Client</option>
                            <option value="Advisor">Advisor</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </div>

                    <div class="form__actions">
                        <button type="button" class="btn ghost" id="cancelModal">Cancel</button>
                        <button type="submit" class="cta small">Save</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Footer -->
        <footer class="footer">
            <div class="container footer__inner">
                <button class="cta">Primary Action</button>
            </div>
        </footer>
    </main>

    <!-- Scripts -->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Settings menu functionality
            const settingsBtn = document.getElementById('settings-btn');
            const settingsMenu = document.getElementById('settings-menu');
            
            if (settingsBtn && settingsMenu) {
                const closeMenu = () => { 
                    settingsMenu.hidden = true; 
                    settingsBtn.setAttribute('aria-expanded', 'false'); 
                };
                const openMenu = () => { 
                    settingsMenu.hidden = false; 
                    settingsBtn.setAttribute('aria-expanded', 'true'); 
                };
                
                settingsBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const expanded = settingsBtn.getAttribute('aria-expanded') === 'true';
                    expanded ? closeMenu() : openMenu();
                });
                
                document.addEventListener('click', (e) => {
                    if (!settingsMenu.hidden && !settingsMenu.contains(e.target) && e.target !== settingsBtn) {
                        closeMenu();
                    }
                });
            }

            // Modal functionality
            const modal = document.getElementById("userModal");
            const addBtn = document.getElementById("addUserBtn");
            const closeBtn = document.getElementById("closeModal");
            const cancelBtn = document.getElementById("cancelModal");
            const userForm = document.getElementById("userForm");
            const usersBody = document.getElementById("users-body");

            function showModal() {
                modal.setAttribute("aria-hidden", "false");
                modal.classList.add("open");
            }

            function hideModal() {
                modal.setAttribute("aria-hidden", "true");
                modal.classList.remove("open");
            }

            // User management variables
            let usersCache = [];
            let currentPage = 1;
            const pageSize = 6;
            let searchQuery = "";

            // Load Users
            async function loadUsers() {
                try {
                    const res = await fetch("/Auth/GetUsers");
                    if (!res.ok) throw new Error("Failed to load users");
                    usersCache = await res.json();
                    console.log('Users loaded:', usersCache);
                    renderUsers();
                } catch (err) {
                    console.error("Failed to fetch users", err);
                    alert("Failed to load users");
                }
            }

            function filteredUsers() {
                if (!searchQuery.trim()) return usersCache;
                const q = searchQuery.toLowerCase();
                return usersCache.filter(u =>
                    (u.name || "").toLowerCase().includes(q) ||
                    (u.email || "").toLowerCase().includes(q) ||
                    (u.role || "").toLowerCase().includes(q) ||
                    (u.province || "").toLowerCase().includes(q)
                );
            }

            function renderUsers() {
                const rows = filteredUsers();
                const start = (currentPage - 1) * pageSize;
                const pageRows = rows.slice(start, start + pageSize);

                const bodyHtml = pageRows.map(u => `
                    <tr>
                        <td>${escapeHtml(u.name || '')}</td>
                        <td>${escapeHtml(u.email || '')}</td>
                        <td>${escapeHtml(u.role || '')}</td>
                        <td>${escapeHtml(u.province || '')}</td>
                        <td style="text-align:right;">
                            <button class="btn small" data-action="edit" data-id="${u.id || u.Id}">Edit</button>
                            <button class="btn small danger" data-action="delete" data-id="${u.id || u.Id}">Delete</button>
                        </td>
                    </tr>`).join("");
                
                usersBody.innerHTML = bodyHtml;

                // Render pagination
                const totalPages = Math.max(1, Math.ceil(rows.length / pageSize));
                currentPage = Math.min(currentPage, totalPages);
                
                const pagerButtons = [];
                for (let i = 1; i <= totalPages; i++) {
                    pagerButtons.push(`<button class="page-btn" ${i === currentPage ? 'aria-current="page"' : ''} data-page="${i}">${i}</button>`);
                }
                document.getElementById("pager").innerHTML = pagerButtons.join("");
            }

            // Event delegation for user actions
            usersBody.addEventListener("click", (e) => {
                const btn = e.target.closest("button[data-action]");
                if (!btn) return;
                
                const id = btn.dataset.id;
                const action = btn.dataset.action;
                
                if (action === "edit") {
                    const user = usersCache.find(x => String(x.id || x.Id) === String(id));
                    if (user) {
                        openModal(user);
                    }
                } else if (action === "delete") {
                    deleteUser(id);
                }
            });

            // Pagination event listener
            document.getElementById("pager").addEventListener("click", (e) => {
                const btn = e.target.closest("button[data-page]");
                if (!btn) return;
                currentPage = Number(btn.dataset.page);
                renderUsers();
            });

            // Search functionality
            document.getElementById("userSearch").addEventListener("input", (e) => {
                searchQuery = e.target.value || "";
                currentPage = 1;
                renderUsers();
            });

            // Delete user function
            async function deleteUser(id) {
                if (!confirm("Are you sure you want to delete this user?")) return;
                
                try {
                    const res = await fetch(`/Auth/DeleteUser/${encodeURIComponent(id)}`, {
                        method: "DELETE"
                    });
                    
                    const data = await res.json().catch(() => ({}));
                    
                    if (res.ok) {
                        alert(data.message || "User deleted successfully");
                        await loadUsers();
                    } else {
                        alert(data.message || `Error: ${res.status}`);
                    }
                } catch (err) {
                    console.error("Error deleting user:", err);
                    alert("Failed to delete user - network error");
                }
            }

            function escapeHtml(v) {
                if (v === null || v === undefined) return '';
                return String(v)
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            function openModal(user) {
                const modalTitle = document.getElementById("modalTitle");
                
                if (user) {
                    modalTitle.textContent = "Edit User";
                    document.getElementById("userId").value = user.id || user.Id || "";
                    document.getElementById("Name").value = user.name || "";
                    document.getElementById("email").value = user.email || "";
                    document.getElementById("password").value = "";
                    document.getElementById("Role").value = user.role || "Client";
                    document.getElementById("Province").value = user.province || "Gauteng";
                } else {
                    modalTitle.textContent = "Add User";
                    userForm.reset();
                    document.getElementById("userId").value = "";
                }
                showModal();
            }

            // Event listeners for modal
            addBtn.addEventListener("click", () => openModal(null));
            closeBtn.addEventListener("click", hideModal);
            cancelBtn.addEventListener("click", hideModal);
            modal.addEventListener("click", (e) => { 
                if (e.target === modal) hideModal(); 
            });

            // Save User
            userForm.addEventListener("submit", async (e) => {
                e.preventDefault();

                const userId = document.getElementById("userId").value;
                const user = {
                    Name: document.getElementById("Name").value,
                    Email: document.getElementById("email").value,
                    Password: document.getElementById("password").value,
                    Role: document.getElementById("Role").value,
                    Province: document.getElementById("Province").value
                };

                // Only include ID if editing
                if (userId) {
                    user.Id = userId;
                }

                try {
                    const res = await fetch("/Auth/RegisterUser", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(user)
                    });
                    const data = await res.json();

                    if (res.ok) {
                        alert("✅ " + (data.message || "User saved"));
                        hideModal();
                        await loadUsers();
                    } else {
                        alert("❌ " + (data.message || "Error saving user"));
                    }
                } catch (err) {
                    console.error("Error saving user:", err);
                    alert("❌ Failed to save user");
                }
            });

            // Initial load
            loadUsers();
        });
    </script>
</body>
</html>